// <auto-generated />
using System;
using CatechistHelper.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CatechistHelper.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241210165043_update_11_12")]
    partial class update_11_12
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CatechistHelper.Domain.Entities.AbsenceRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("approval_date");

                    b.Property<Guid?>("ApproverId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("approver_id");

                    b.Property<Guid>("CatechistId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("catechist_id");

                    b.Property<string>("Comment")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("reason");

                    b.Property<Guid?>("ReplacementCatechistId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("replacement_catechist_id");

                    b.Property<Guid>("SlotId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("slot_id");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ApproverId");

                    b.HasIndex("CatechistId");

                    b.HasIndex("ReplacementCatechistId");

                    b.HasIndex("SlotId");

                    b.ToTable("absence_request");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Avatar")
                        .HasMaxLength(500)
                        .HasColumnType("varchar")
                        .HasColumnName("avatar");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("full_name");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("gender");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("hashed_password");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar")
                        .HasColumnName("phone");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("role_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("account");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.BudgetTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("event_id");

                    b.Property<double>("FromBudget")
                        .HasColumnType("float")
                        .HasColumnName("from_budget");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("note");

                    b.Property<double>("ToBudget")
                        .HasColumnType("float")
                        .HasColumnName("to_budget");

                    b.Property<DateTime>("TransactionAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("transaction_at");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("budget_transaction");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.Catechist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("account_id");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("address");

                    b.Property<string>("BirthPlace")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("birth_place");

                    b.Property<Guid>("ChristianNameId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("christian_name_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("FatherName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("father_name");

                    b.Property<string>("FatherPhone")
                        .HasMaxLength(10)
                        .HasColumnType("varchar")
                        .HasColumnName("father_phone");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("full_name");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("gender");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("varchar")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsTeaching")
                        .HasColumnType("bit")
                        .HasColumnName("is_teaching");

                    b.Property<Guid>("LevelId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("level_id");

                    b.Property<string>("MotherName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("mother_name");

                    b.Property<string>("MotherPhone")
                        .HasMaxLength(10)
                        .HasColumnType("varchar")
                        .HasColumnName("mother_phone");

                    b.Property<string>("Note")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("note");

                    b.Property<string>("Phone")
                        .HasMaxLength(10)
                        .HasColumnType("varchar")
                        .HasColumnName("phone");

                    b.Property<string>("Qualification")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("qualification");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("ChristianNameId");

                    b.HasIndex("LevelId");

                    b.ToTable("catechist");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.CatechistInClass", b =>
                {
                    b.Property<Guid>("CatechistId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("catechist_id");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("class_id");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit")
                        .HasColumnName("is_main");

                    b.HasKey("CatechistId", "ClassId");

                    b.HasIndex("ClassId");

                    b.ToTable("catechist_in_class");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.CatechistInGrade", b =>
                {
                    b.Property<Guid>("CatechisteId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("catechist_id");

                    b.Property<Guid>("GradeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("grade_id");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit")
                        .HasColumnName("is_main");

                    b.HasKey("CatechisteId", "GradeId");

                    b.HasIndex("GradeId");

                    b.ToTable("catechist_in_grade");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.CatechistInSlot", b =>
                {
                    b.Property<Guid>("CatechistId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("catechist_id");

                    b.Property<Guid>("SlotId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("slot_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("type");

                    b.HasKey("CatechistId", "SlotId");

                    b.HasIndex("SlotId");

                    b.ToTable("catechist_in_slot");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.CatechistInTraining", b =>
                {
                    b.Property<Guid>("CatechistId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("catechist_id");

                    b.Property<Guid>("TrainingListId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("training_list_id");

                    b.Property<byte>("CatechistInTrainingStatus")
                        .HasColumnType("tinyint")
                        .HasColumnName("status");

                    b.HasKey("CatechistId", "TrainingListId");

                    b.HasIndex("TrainingListId");

                    b.ToTable("catechist_in_training");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.Certificate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("description");

                    b.Property<string>("Image")
                        .HasMaxLength(500)
                        .HasColumnType("varchar")
                        .HasColumnName("image_url");

                    b.Property<Guid>("LevelId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("level_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.ToTable("certificate");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.CertificateOfCandidate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar")
                        .HasColumnName("image_url");

                    b.Property<Guid>("RegistrationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("registration_id");

                    b.HasKey("Id");

                    b.HasIndex("RegistrationId");

                    b.ToTable("certificate_of_candidate");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.CertificateOfCatechist", b =>
                {
                    b.Property<Guid>("CatechistId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("catechist_id");

                    b.Property<Guid>("CertificateId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("certificate_id");

                    b.Property<DateTime>("GrantedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("granted_date");

                    b.HasKey("CatechistId", "CertificateId");

                    b.HasIndex("CertificateId");

                    b.ToTable("certificate_of_catechist");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.ChristianName", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("gender");

                    b.Property<DateTime?>("HolyDay")
                        .HasColumnType("datetime2")
                        .HasColumnName("holy_day");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("christian_name");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.Class", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<byte>("ClassStatus")
                        .HasColumnType("tinyint")
                        .HasColumnName("status");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("end_date");

                    b.Property<Guid>("GradeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("grade_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("note");

                    b.Property<int>("NumberOfCatechist")
                        .HasColumnType("int")
                        .HasColumnName("number_of_catechist");

                    b.Property<Guid>("PastoralYearId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("pastoral_year_id");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_date");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("GradeId");

                    b.HasIndex("PastoralYearId");

                    b.ToTable("class");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("description");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("end_time");

                    b.Property<Guid>("EventCategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("event_category_id");

                    b.Property<byte>("EventStatus")
                        .HasColumnType("tinyint")
                        .HasColumnName("status");

                    b.Property<bool>("IsCheckedIn")
                        .HasColumnType("bit")
                        .HasColumnName("is_checked_in");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsPeriodic")
                        .HasColumnType("bit")
                        .HasColumnName("is_periodic");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("note");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_time");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<double>("current_budget")
                        .HasColumnType("float")
                        .HasColumnName("current_budget");

                    b.HasKey("Id");

                    b.HasIndex("EventCategoryId");

                    b.ToTable("event");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.EventCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("event_category");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.Grade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("MajorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("major_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("MajorId");

                    b.ToTable("grade");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.Interview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int>("InterviewType")
                        .HasColumnType("int")
                        .HasColumnName("interview_type");

                    b.Property<bool>("IsPassed")
                        .HasColumnType("bit")
                        .HasColumnName("is_passed");

                    b.Property<DateTime>("MeetingTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("meeting_time");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("note");

                    b.Property<Guid>("RegistrationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("registration_id");

                    b.HasKey("Id");

                    b.HasIndex("RegistrationId")
                        .IsUnique();

                    b.ToTable("interview");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.LeaveRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("approval_date");

                    b.Property<Guid?>("ApproverId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("approver_id");

                    b.Property<Guid>("CatechistId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("catechist_id");

                    b.Property<string>("Comment")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime>("LeaveDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("leave_date");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("reason");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ApproverId");

                    b.HasIndex("CatechistId");

                    b.ToTable("leave_request");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.Level", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("description");

                    b.Property<int>("HierarchyLevel")
                        .HasColumnType("int")
                        .HasColumnName("hierarchy_level");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("level");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.Major", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int>("HierarchyLevel")
                        .HasColumnType("int")
                        .HasColumnName("hierarchy_level");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("major");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.Member", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("account_id");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("event_id");

                    b.Property<Guid>("RoleEventId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("role_event_id");

                    b.HasKey("AccountId", "EventId");

                    b.HasIndex("EventId");

                    b.HasIndex("RoleEventId");

                    b.ToTable("member");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.MemberOfProcess", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("account_id");

                    b.Property<Guid>("ProcessId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("process_id");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit")
                        .HasColumnName("is_main");

                    b.HasKey("AccountId", "ProcessId");

                    b.HasIndex("ProcessId");

                    b.ToTable("member_of_process");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.ParticipantInEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("email");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("event_id");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("full_name");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("gender");

                    b.Property<bool>("IsAttended")
                        .HasColumnType("bit")
                        .HasColumnName("is_attended");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar")
                        .HasColumnName("phone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("participant_in_event");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.PastoralYear", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("note");

                    b.Property<byte>("PastoralYearStatus")
                        .HasColumnType("tinyint")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.ToTable("pastoral_year");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("account_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Module")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("module");

                    b.Property<Guid>("PostCategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("post_category_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("PostCategoryId");

                    b.ToTable("post");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.PostCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("post_category");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.Process", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<double>("ActualFee")
                        .HasColumnType("float")
                        .HasColumnName("actual_fee");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<long>("Duration")
                        .HasColumnType("bigint")
                        .HasColumnName("duration");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("end_time");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("event_id");

                    b.Property<double>("Fee")
                        .HasColumnType("float")
                        .HasColumnName("fee");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("note");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_time");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("process");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.RecruiterInInterview", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("account_id");

                    b.Property<Guid>("InterviewId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("interview_id");

                    b.Property<string>("OnlineRoomUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("online_room_url");

                    b.HasKey("AccountId", "InterviewId");

                    b.HasIndex("InterviewId");

                    b.ToTable("recruiter_in_interview");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.Registration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("full_name");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("gender");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsTeachingBefore")
                        .HasColumnType("bit")
                        .HasColumnName("is_teaching_before");

                    b.Property<string>("Note")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("note");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar")
                        .HasColumnName("phone");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<int>("YearOfTeaching")
                        .HasColumnType("int")
                        .HasColumnName("year_of_teaching");

                    b.HasKey("Id");

                    b.ToTable("registration");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.RegistrationProcess", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("name");

                    b.Property<Guid>("RegistrationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("registration_id");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("RegistrationId");

                    b.ToTable("registration_process");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.RequestImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("AbsenceRequestId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("request_id");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("image_url");

                    b.Property<DateTime>("UploadAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.HasKey("Id");

                    b.HasIndex("AbsenceRequestId");

                    b.ToTable("request_image");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("role_name");

                    b.HasKey("Id");

                    b.ToTable("role");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.RoleEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("role_event");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("description");

                    b.Property<string>("Image")
                        .HasMaxLength(500)
                        .HasColumnType("varchar")
                        .HasColumnName("image_url");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("room");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.Slot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("class_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("end_time");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("note");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("room_id");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_time");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("RoomId");

                    b.ToTable("slot");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.SystemConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("key");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.ToTable("system_configuration");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.TeachingQualification", b =>
                {
                    b.Property<Guid>("LevelId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("level_id");

                    b.Property<Guid>("MajorId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("major_id");

                    b.HasKey("LevelId", "MajorId");

                    b.HasIndex("MajorId");

                    b.ToTable("teaching_qualification");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.TrainingList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("CertificateId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("certificate_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("description");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("end_time");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<Guid>("NextLevelId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("next_level_id");

                    b.Property<Guid>("PreviousLevelId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("previous_level_id");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_time");

                    b.Property<byte>("TrainingListStatus")
                        .HasColumnType("tinyint")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CertificateId");

                    b.HasIndex("NextLevelId");

                    b.HasIndex("PreviousLevelId");

                    b.ToTable("training_list");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.TransactionImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("BudgetTransactionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("budget_transaction_id");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("image_url");

                    b.Property<DateTime>("UploadAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.HasKey("Id");

                    b.HasIndex("BudgetTransactionId");

                    b.ToTable("transaction_image");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.AbsenceRequest", b =>
                {
                    b.HasOne("CatechistHelper.Domain.Entities.Account", "Approver")
                        .WithMany("AbsenceRequests")
                        .HasForeignKey("ApproverId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CatechistHelper.Domain.Entities.Catechist", "Catechist")
                        .WithMany("AbsenceRequests")
                        .HasForeignKey("CatechistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CatechistHelper.Domain.Entities.Catechist", "ReplacementCatechist")
                        .WithMany("ReplacementAbsenceRequests")
                        .HasForeignKey("ReplacementCatechistId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CatechistHelper.Domain.Entities.Slot", "Slot")
                        .WithMany("AbsenceRequests")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("Catechist");

                    b.Navigation("ReplacementCatechist");

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.Account", b =>
                {
                    b.HasOne("CatechistHelper.Domain.Entities.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.BudgetTransaction", b =>
                {
                    b.HasOne("CatechistHelper.Domain.Entities.Event", "Event")
                        .WithMany("BudgetTransactions")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.Catechist", b =>
                {
                    b.HasOne("CatechistHelper.Domain.Entities.Account", "Account")
                        .WithOne("Catechist")
                        .HasForeignKey("CatechistHelper.Domain.Entities.Catechist", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CatechistHelper.Domain.Entities.ChristianName", "ChristianName")
                        .WithMany("Catechists")
                        .HasForeignKey("ChristianNameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CatechistHelper.Domain.Entities.Level", "Level")
                        .WithMany("Catechists")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("ChristianName");

                    b.Navigation("Level");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.CatechistInClass", b =>
                {
                    b.HasOne("CatechistHelper.Domain.Entities.Catechist", "Catechist")
                        .WithMany("CatechistInClasses")
                        .HasForeignKey("CatechistId")
                        .IsRequired();

                    b.HasOne("CatechistHelper.Domain.Entities.Class", "Class")
                        .WithMany("CatechistInClasses")
                        .HasForeignKey("ClassId")
                        .IsRequired();

                    b.Navigation("Catechist");

                    b.Navigation("Class");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.CatechistInGrade", b =>
                {
                    b.HasOne("CatechistHelper.Domain.Entities.Catechist", "Catechist")
                        .WithMany("CatechistInGrades")
                        .HasForeignKey("CatechisteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CatechistHelper.Domain.Entities.Grade", "Grade")
                        .WithMany("CatechistInGrades")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Catechist");

                    b.Navigation("Grade");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.CatechistInSlot", b =>
                {
                    b.HasOne("CatechistHelper.Domain.Entities.Catechist", "Catechist")
                        .WithMany("CatechistInSlots")
                        .HasForeignKey("CatechistId")
                        .IsRequired();

                    b.HasOne("CatechistHelper.Domain.Entities.Slot", "Slot")
                        .WithMany("CatechistInSlots")
                        .HasForeignKey("SlotId")
                        .IsRequired();

                    b.Navigation("Catechist");

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.CatechistInTraining", b =>
                {
                    b.HasOne("CatechistHelper.Domain.Entities.Catechist", "Catechist")
                        .WithMany("CatechistInTrainings")
                        .HasForeignKey("CatechistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CatechistHelper.Domain.Entities.TrainingList", "TrainingList")
                        .WithMany("CatechistInTrainings")
                        .HasForeignKey("TrainingListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Catechist");

                    b.Navigation("TrainingList");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.Certificate", b =>
                {
                    b.HasOne("CatechistHelper.Domain.Entities.Level", "Level")
                        .WithMany("Certificates")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Level");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.CertificateOfCandidate", b =>
                {
                    b.HasOne("CatechistHelper.Domain.Entities.Registration", "Registration")
                        .WithMany("CertificateOfCandidates")
                        .HasForeignKey("RegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.CertificateOfCatechist", b =>
                {
                    b.HasOne("CatechistHelper.Domain.Entities.Catechist", "Catechist")
                        .WithMany("CertificateOfCatechists")
                        .HasForeignKey("CatechistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CatechistHelper.Domain.Entities.Certificate", "Certificate")
                        .WithMany("CertificateOfCatechists")
                        .HasForeignKey("CertificateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Catechist");

                    b.Navigation("Certificate");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.Class", b =>
                {
                    b.HasOne("CatechistHelper.Domain.Entities.Grade", "Grade")
                        .WithMany("Classes")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CatechistHelper.Domain.Entities.PastoralYear", "PastoralYear")
                        .WithMany("Classes")
                        .HasForeignKey("PastoralYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Grade");

                    b.Navigation("PastoralYear");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.Event", b =>
                {
                    b.HasOne("CatechistHelper.Domain.Entities.EventCategory", "EventCategory")
                        .WithMany("Events")
                        .HasForeignKey("EventCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EventCategory");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.Grade", b =>
                {
                    b.HasOne("CatechistHelper.Domain.Entities.Major", "Major")
                        .WithMany("Grades")
                        .HasForeignKey("MajorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Major");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.Interview", b =>
                {
                    b.HasOne("CatechistHelper.Domain.Entities.Registration", "Registration")
                        .WithOne("Interview")
                        .HasForeignKey("CatechistHelper.Domain.Entities.Interview", "RegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.LeaveRequest", b =>
                {
                    b.HasOne("CatechistHelper.Domain.Entities.Account", "Approver")
                        .WithMany("LeaveRequests")
                        .HasForeignKey("ApproverId");

                    b.HasOne("CatechistHelper.Domain.Entities.Catechist", "Catechist")
                        .WithMany("LeaveRequests")
                        .HasForeignKey("CatechistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("Catechist");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.Member", b =>
                {
                    b.HasOne("CatechistHelper.Domain.Entities.Account", "Account")
                        .WithMany("Members")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CatechistHelper.Domain.Entities.Event", "Event")
                        .WithMany("Members")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CatechistHelper.Domain.Entities.RoleEvent", "RoleEvent")
                        .WithMany("Members")
                        .HasForeignKey("RoleEventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Event");

                    b.Navigation("RoleEvent");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.MemberOfProcess", b =>
                {
                    b.HasOne("CatechistHelper.Domain.Entities.Account", "Account")
                        .WithMany("MemberOfProcesses")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CatechistHelper.Domain.Entities.Process", "Process")
                        .WithMany("MemberOfProcesses")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Process");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.ParticipantInEvent", b =>
                {
                    b.HasOne("CatechistHelper.Domain.Entities.Event", "Event")
                        .WithMany("ParticipantInEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.Post", b =>
                {
                    b.HasOne("CatechistHelper.Domain.Entities.Account", "Account")
                        .WithMany("Posts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CatechistHelper.Domain.Entities.PostCategory", "PostCategory")
                        .WithMany("Posts")
                        .HasForeignKey("PostCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("PostCategory");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.Process", b =>
                {
                    b.HasOne("CatechistHelper.Domain.Entities.Event", "Event")
                        .WithMany("Processes")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.RecruiterInInterview", b =>
                {
                    b.HasOne("CatechistHelper.Domain.Entities.Account", "Account")
                        .WithMany("RecruiterInInterviews")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CatechistHelper.Domain.Entities.Interview", "Interview")
                        .WithMany("RecruiterInInterviews")
                        .HasForeignKey("InterviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Interview");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.RegistrationProcess", b =>
                {
                    b.HasOne("CatechistHelper.Domain.Entities.Registration", "Registration")
                        .WithMany("RegistrationProcesses")
                        .HasForeignKey("RegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.RequestImage", b =>
                {
                    b.HasOne("CatechistHelper.Domain.Entities.AbsenceRequest", "AbsenceRequest")
                        .WithMany("RequestImages")
                        .HasForeignKey("AbsenceRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AbsenceRequest");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.Slot", b =>
                {
                    b.HasOne("CatechistHelper.Domain.Entities.Class", "Class")
                        .WithMany("Slots")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CatechistHelper.Domain.Entities.Room", "Room")
                        .WithMany("Slots")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.TeachingQualification", b =>
                {
                    b.HasOne("CatechistHelper.Domain.Entities.Level", "Level")
                        .WithMany("TeachingQualifications")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CatechistHelper.Domain.Entities.Major", "Major")
                        .WithMany("TeachingQualifications")
                        .HasForeignKey("MajorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Level");

                    b.Navigation("Major");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.TrainingList", b =>
                {
                    b.HasOne("CatechistHelper.Domain.Entities.Certificate", "Certificate")
                        .WithMany("TrainingLists")
                        .HasForeignKey("CertificateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CatechistHelper.Domain.Entities.Level", "NextLevel")
                        .WithMany("NextLevelTrainings")
                        .HasForeignKey("NextLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CatechistHelper.Domain.Entities.Level", "PreviousLevel")
                        .WithMany("PreviousLevelTrainings")
                        .HasForeignKey("PreviousLevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Certificate");

                    b.Navigation("NextLevel");

                    b.Navigation("PreviousLevel");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.TransactionImage", b =>
                {
                    b.HasOne("CatechistHelper.Domain.Entities.BudgetTransaction", "BudgetTransaction")
                        .WithMany("TransactionImages")
                        .HasForeignKey("BudgetTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BudgetTransaction");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.AbsenceRequest", b =>
                {
                    b.Navigation("RequestImages");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.Account", b =>
                {
                    b.Navigation("AbsenceRequests");

                    b.Navigation("Catechist");

                    b.Navigation("LeaveRequests");

                    b.Navigation("MemberOfProcesses");

                    b.Navigation("Members");

                    b.Navigation("Posts");

                    b.Navigation("RecruiterInInterviews");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.BudgetTransaction", b =>
                {
                    b.Navigation("TransactionImages");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.Catechist", b =>
                {
                    b.Navigation("AbsenceRequests");

                    b.Navigation("CatechistInClasses");

                    b.Navigation("CatechistInGrades");

                    b.Navigation("CatechistInSlots");

                    b.Navigation("CatechistInTrainings");

                    b.Navigation("CertificateOfCatechists");

                    b.Navigation("LeaveRequests");

                    b.Navigation("ReplacementAbsenceRequests");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.Certificate", b =>
                {
                    b.Navigation("CertificateOfCatechists");

                    b.Navigation("TrainingLists");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.ChristianName", b =>
                {
                    b.Navigation("Catechists");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.Class", b =>
                {
                    b.Navigation("CatechistInClasses");

                    b.Navigation("Slots");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.Event", b =>
                {
                    b.Navigation("BudgetTransactions");

                    b.Navigation("Members");

                    b.Navigation("ParticipantInEvents");

                    b.Navigation("Processes");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.EventCategory", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.Grade", b =>
                {
                    b.Navigation("CatechistInGrades");

                    b.Navigation("Classes");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.Interview", b =>
                {
                    b.Navigation("RecruiterInInterviews");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.Level", b =>
                {
                    b.Navigation("Catechists");

                    b.Navigation("Certificates");

                    b.Navigation("NextLevelTrainings");

                    b.Navigation("PreviousLevelTrainings");

                    b.Navigation("TeachingQualifications");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.Major", b =>
                {
                    b.Navigation("Grades");

                    b.Navigation("TeachingQualifications");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.PastoralYear", b =>
                {
                    b.Navigation("Classes");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.PostCategory", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.Process", b =>
                {
                    b.Navigation("MemberOfProcesses");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.Registration", b =>
                {
                    b.Navigation("CertificateOfCandidates");

                    b.Navigation("Interview");

                    b.Navigation("RegistrationProcesses");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.RoleEvent", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.Room", b =>
                {
                    b.Navigation("Slots");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.Slot", b =>
                {
                    b.Navigation("AbsenceRequests");

                    b.Navigation("CatechistInSlots");
                });

            modelBuilder.Entity("CatechistHelper.Domain.Entities.TrainingList", b =>
                {
                    b.Navigation("CatechistInTrainings");
                });
#pragma warning restore 612, 618
        }
    }
}
